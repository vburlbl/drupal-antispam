<?php

/**
 * @file
 * Main CleanTalk integration module functions.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cleantalk_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  _cleantalk_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cleantalk_form_comment_node_page_form_alter(&$form, &$form_state, $form_id) {
  _cleantalk_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cleantalk_form_comment_node_article_form_alter(&$form, &$form_state, $form_id) {
  _cleantalk_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_entity_presave().
 */
function cleantalk_entity_presave($entity, $type) {
  if ($type != 'comment' && $type != 'user') {
    return;
  }
  // Don't check reged user with >= 'cleantalk_comments' approved msgs.
  if ($type == 'comment'
    && property_exists($entity, 'is_anonymous') && $entity->is_anonymous == 0
    && property_exists($entity, 'uid') && $entity->uid > 0
  ) {
    $result = db_select('comment', 'c')
      ->condition('uid', $entity->uid, '=')
      ->condition('status', 1, '=')
      ->countQuery()
      ->execute()
      ->fetchObject();
    if (property_exists($result, 'expression')) {
      $count = intval($result->expression);
    }
    else {
      $count = 0;
    }
    $ct_comments = variable_get('cleantalk_comments', 3);
    if ($ct_comments < 1) {
      $ct_comments = 1;
      variable_set('cleantalk_comments', 1);
    }
    if ($count >= $ct_comments) {
      return;
    }
  }
  if (
    $type == 'user'
    && property_exists($entity, 'is_new') && $entity->is_new == 1
    && property_exists($entity, 'uid') && $entity->uid == 0
    ||
    $type == 'comment'
  ) {
    $path = _cleantalk_library_path_ok();
    if (!$path) {
      watchdog(
        'cleantalk',
        _cleantalk_library_missing_message_4runtime('CleanTalk PHP-antispam classes', 'sites/all/libraries/cleantalk'),
        array(),
        WATCHDOG_ERROR
      );
      return;
    }
    else {
      require_once DRUPAL_ROOT . '/' . $path . '/cleantalk.class.php';
    }

    $ct_authkey = variable_get('cleantalk_authkey', '');
    $ct_ws = _cleantalk_get_ws();

    if (!isset($_POST['ct_checkjs'])) {
      $checkjs = NULL;
    }
    elseif ($_POST['ct_checkjs'] == _cleantalk_get_checkjs_value()) {
      $checkjs = 1;
    }
    else {
      $checkjs = 0;
    }

    if (isset($_SERVER['HTTP_USER_AGENT'])) {
      $user_agent = htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']);
    }
    else {
      $user_agent = NULL;
    }

    if (isset($_SERVER['HTTP_REFERER'])) {
      $refferrer = htmlspecialchars((string) $_SERVER['HTTP_REFERER']);
    }
    else {
      $refferrer = NULL;
    }

    $ct = new Cleantalk();
    $ct->work_url = $ct_ws['work_url'];
    $ct->server_url = $ct_ws['server_url'];
    $ct->server_ttl = $ct_ws['server_ttl'];
    $ct->server_changed = $ct_ws['server_changed'];

    $sender_info = json_encode(
      array(
        'cms_lang' => 'en',
        'REFFERRER' => $refferrer,
        'post_url' => $refferrer,
        'USER_AGENT' => $user_agent,
      )
    );

    $ct_request = new CleantalkRequest();
    $ct_request->auth_key = $ct_authkey;
    $ct_request->agent = 'drupal-101';
    $ct_request->response_lang = 'en';
    $ct_request->js_on = $checkjs;
    $ct_request->sender_info = $sender_info;
    $ct_request->sender_email = property_exists($entity, 'mail') ? $entity->mail : NULL;
    $ct_request->sender_nickname = property_exists($entity, 'name') ? $entity->name : NULL;
    $ct_request->sender_ip = ip_address();

    $ct_submit_time = NULL;
    switch ($type) {
      case 'comment':
        if (isset($_SESSION['ct_submit_comment_time'])) {
          $ct_submit_time = time() - $_SESSION['ct_submit_comment_time'];
        }
        $timelabels_key = 'mail_error_comment';
        $ct_request->submit_time = $ct_submit_time;

        $comment_subject = property_exists($entity, 'subject') ? $entity->subject : '';
        $comment_lang = property_exists($entity, 'language') ? $entity->language : LANGUAGE_NONE;

        if (property_exists($entity, 'comment_body') && is_array($entity->comment_body)) {
          if (
            array_key_exists($comment_lang, $entity->comment_body) &&
            is_array($entity->comment_body[$comment_lang]) &&
            array_key_exists(0, $entity->comment_body[$comment_lang]) &&
            is_array($entity->comment_body[$comment_lang][0]) &&
            array_key_exists('value', $entity->comment_body[$comment_lang][0]) &&
            is_string($entity->comment_body[$comment_lang][0]['value'])
          ) {
            $comment_body = $entity->comment_body[$comment_lang][0]['value'];
          }
          elseif (
            array_key_exists(LANGUAGE_NONE, $entity->comment_body) &&
            is_array($entity->comment_body[LANGUAGE_NONE]) &&
            array_key_exists(0, $entity->comment_body[LANGUAGE_NONE]) &&
            is_array($entity->comment_body[LANGUAGE_NONE][0]) &&
            array_key_exists('value', $entity->comment_body[LANGUAGE_NONE][0]) &&
            is_string($entity->comment_body[LANGUAGE_NONE][0]['value'])
          ) {
            $comment_body = $entity->comment_body[LANGUAGE_NONE][0]['value'];
          }
          else {
            $comment_body = '';
          }
        }
        $ct_request->message = $comment_subject . " \n\n" . $comment_body;

        // Must be = node text + last 10 comments.
        $example = '';

        // Additional info about node.
        $post_info = '';

        // Node id of commented entity - page or article.
        $nid = property_exists($entity, 'nid') ? $entity->nid : NULL;
        if ($nid != NULL) {
          $a_example = array();
          $a_post_info = array();

          // Find node.
          $result_node = node_load($nid);
          if ($result_node) {
            $node_lang = property_exists($result_node, 'language') ? $result_node->language : LANGUAGE_NONE;
            $a_example['title'] = property_exists($result_node, 'title') ? $result_node->title : '';

            if (property_exists($result_node, 'body') && is_array($result_node->body)) {
              if (
                array_key_exists($node_lang, $result_node->body) &&
                is_array($result_node->body[$node_lang]) &&
                array_key_exists(0, $result_node->body[$node_lang]) &&
                is_array($result_node->body[$node_lang][0]) &&
                array_key_exists('value', $result_node->body[$node_lang][0]) &&
                is_string($result_node->body[$node_lang][0]['value'])
              ) {
                $a_example['body'] = $result_node->body[$comment_lang][0]['value'];
              }
              elseif (
                array_key_exists(LANGUAGE_NONE, $result_node->body) &&
                is_array($result_node->body[LANGUAGE_NONE]) &&
                array_key_exists(0, $result_node->body[LANGUAGE_NONE]) &&
                is_array($result_node->body[LANGUAGE_NONE][0]) &&
                array_key_exists('value', $result_node->body[LANGUAGE_NONE][0]) &&
                is_string($result_node->body[LANGUAGE_NONE][0]['value'])
              ) {
                $a_example['body'] = $result_node->body[LANGUAGE_NONE][0]['value'];
              }
              else {
                $a_example['body'] = '';
              }
            }
            $a_post_info['comment_type'] = 'comment';
          }

          // Find last 10 comments.
          $result_10 = db_query(
                  'SELECT comment.subject AS subject,field_data_comment_body.comment_body_value AS value FROM {comment} LEFT JOIN {field_data_comment_body} ON comment.cid=field_data_comment_body.entity_id WHERE comment.nid=:nid AND comment.status=1 order by changed desc limit 10',
                  array(':nid' => $nid)
          );
          $a_example['comments'] = '';
          foreach ($result_10 as $record) {
            $a_example['comments'] .= $record->subject . " \n\n" . $record->value . " \n\n";
          }

          // JSON format.
          $example = json_encode($a_example);
          $post_info = json_encode($a_post_info);

          // Plain text format.
          if ($example === FALSE) {
            $example = '';
            if ($result_node) {
              $example .= $a_example['title'] . " \n\n" . $a_example['body'] . " \n\n";
            }
            $example .= $a_example['comments'];
          }
          if ($post_info === FALSE) {
            $post_info = '';
          }
        }
        // Node text + last 10 comments in json or plain text format.
        $ct_request->example = $example;
        $ct_request->post_info = $post_info;
        $ct_result = $ct->isAllowMessage($ct_request);
        break;

      case 'user':
        if (isset($_SESSION['ct_submit_register_time'])) {
          $ct_submit_time = time() - $_SESSION['ct_submit_register_time'];
        }
        $timelabels_key = 'mail_error_reg';
        $ct_request->submit_time = $ct_submit_time;
        $ct_request->tz = property_exists($entity, 'timezone') ? $entity->timezone : NULL;
        $ct_result = $ct->isAllowUser($ct_request);
        break;

    }

    if ($ct->server_change) {
      _cleantalk_set_ws(
              $ct->work_url, $ct->server_url, $ct->server_ttl, time()
      );
    }

    // First check errstr flag.
    if (!empty($ct_result->errstr)
      || (!empty($ct_result->inactive) && $ct_result->inactive == 1)
    ) {
      // Cleantalk error so we go default way (no action at all).
      // Just inform admin.
      $err_title = $_SERVER['SERVER_NAME'] . ' - CleanTalk hook error';
      if (!empty($ct_result->errstr)) {
        $err_str = preg_replace('/^[^\*]*?\*\*\*|\*\*\*[^\*]*?$/iu', '', $ct_result->errstr);
      }
      else {
        $err_str = preg_replace('/^[^\*]*?\*\*\*|\*\*\*[^\*]*?$/iu', '', $ct_result->comment);
      }

      $send_flag = FALSE;
      $insert_flag = FALSE;

      $result = db_select('cleantalk_timelabels', 'c')
      ->fields('c', array('ct_value'))
      ->condition('ct_key', $timelabels_key, '=')
      ->execute();
      if ($result->rowCount() == 0) {
        $send_flag = TRUE;
        $insert_flag = TRUE;
      }
      elseif (time() - 900 > $result->fetchObject()->ct_value) {
        // 15 minutes.
        $send_flag = TRUE;
        $insert_flag = FALSE;
      }

      if ($send_flag) {
        if ($insert_flag) {
          db_insert('cleantalk_timelabels')
          ->fields(array(
            'ct_key' => $timelabels_key,
            'ct_value' => time(),
          ))
          ->execute();
        }
        else {
          db_update('cleantalk_timelabels')
          ->fields(array(
            'ct_value' => time(),
           ))
           ->condition('ct_key', $timelabels_key, '=')
           ->execute();
        }

        $my_module = 'cleantalk';
        $to = variable_get('site_mail', ini_get('sendmail_from'));
        $from = $to;
        if (!empty($to)) {
          $message = array(
            'id' => $my_module . '_' . $timelabels_key,
            'to' => $to,
            'subject' => $err_title,
            'body' => array($err_str),
            'headers' => array(
              'From' => $from,
              'Sender' => $from,
              'Return-Path' => $from,
            ),
          );
          $system = drupal_mail_system($my_module, $timelabels_key);
          $system->mail($system->format($message));
        }
      }
      return;
    }

    if ($ct_result->allow == 1) {
      // Not spammer.
      // Store request_id in globals to store it in DB later.
      $GLOBALS['ct_request_id'] = $ct_result->id;
      // $GLOBALS['ct_result_comment'] - don't store, means good comment.
    }
    else {
      // Spammer.
      // Check stop_queue flag.
      if ($type == 'comment' && $ct_result->stop_queue == 0) {
        // Spammer and stop_queue == 0 - to manual approvement.
        // Store request_id and comment in globals to store them in DB later.
        $GLOBALS['ct_request_id'] = $ct_result->id;
        // Store $GLOBALS['ct_result_comment'] - means bad comment.
        $GLOBALS['ct_result_comment'] = $ct_result->comment;
      }
      else {
        // New user or Spammer and stop_queue == 1 - display message and exit.
        ?>
        <html>
          <head>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
            <style>
              .ct {
                width: 500px;
                border: 1px solid gray;
                box-shadow: 0 0 10px gray;
                font: normal 14px Arial;
                padding: 30px;
                margin: 30px auto;
              }
            </style>
          </head>
          <body>
            <div class="ct">
        <?php
        echo $ct_result->comment;
        ?>
              <br /><br /><a href="#" onclick="history.back()">Go back</a>
              <script>setTimeout("history.back()", 5000);</script>
            </div>
          </body>
        </html>
              <?php
              drupal_exit();
      }
    }
  }
}

/**
 * Implements hook_comment_insert().
 */
function cleantalk_comment_insert($comment) {
  if (isset($GLOBALS['ct_request_id'])) {
    // Values of request_id and comment are stored in globals.
    // Store them in DB now.
    db_insert('cleantalk_cids')
    ->fields(array(
    'cid' => $comment->cid,
    'ct_request_id' => $GLOBALS['ct_request_id'],
    'ct_result_comment' => isset($GLOBALS['ct_result_comment']) ? $GLOBALS['ct_result_comment'] : '',
    ))
    ->execute();

    $ct_automod = variable_get('cleantalk_automod', 1);
    if ($ct_automod == 1) {
      // Automoderation enabled - change comment status.
      // $GLOBALS['ct_result_comment'] means bad comment, set status = 0.
      // No $GLOBALS['ct_result_comment'] means good comment, set status = 1.
      db_update('comment')
      ->fields(array(
        'status' => isset($GLOBALS['ct_result_comment']) ? COMMENT_NOT_PUBLISHED : COMMENT_PUBLISHED,
      ))
      ->condition('cid', $comment->cid, '=')
      ->execute();
    }

    unset($GLOBALS['ct_request_id']);
  }
}

/**
 * Implements hook_user_insert().
 */
function cleantalk_user_insert(&$edit, $account, $category) {
  if ($category != 'account') {
    return;
  }
  if (isset($GLOBALS['ct_request_id'])) {
    db_insert('cleantalk_uids')
    ->fields(array(
    'uid' => $account->uid,
    'ct_request_id' => $GLOBALS['ct_request_id'],
    'ct_result_comment' => isset($GLOBALS['ct_result_comment']) ? $GLOBALS['ct_result_comment'] : '',
    ))
    ->execute();
    unset($GLOBALS['ct_request_id']);
  }
}

/**
 * Implements hook_comment_publish().
 */
function cleantalk_comment_publish($comment) {
  $result = db_select('cleantalk_cids', 'c')
  ->fields('c', array('ct_request_id', 'ct_result_comment'))
  ->condition('cid', $comment->cid, '=')
  ->range(0, 1)
  ->execute();
  if ($result->rowCount() > 0) {
    $ct_result = $result->fetchObject();
    // If ct_result_comment is not empty then comment is not approved by server.
    // But we publish it then comment is approved by admin.
    // We need to send positive feedback.
    _cleantalk_send_feedback($ct_result->ct_request_id, 1);
    db_delete('cleantalk_cids')
    ->condition('cid', $comment->cid, '=')
    ->execute();
  }
}

/**
 * Implements hook_comment_delete().
 */
function cleantalk_comment_delete($comment) {
  $result = db_select('cleantalk_cids', 'c')
  ->fields('c', array('ct_request_id', 'ct_result_comment'))
  ->condition('cid', $comment->cid, '=')
  ->range(0, 1)
  ->execute();
  if ($result->rowCount() > 0) {
    $ct_result = $result->fetchObject();
    // If ct_result_comment is empty then comment is approved by server.
    // But we delete it then comment is not approved by admin.
    // We need to send negative feedback.
    _cleantalk_send_feedback($ct_result->ct_request_id, 0);
    db_delete('cleantalk_cids')
    ->condition('cid', $comment->cid, '=')
    ->execute();
  }
}

/**
 * Implements hook_user_delete().
 */
function cleantalk_user_delete($account) {
  $result = db_select('cleantalk_uids', 'c')
  ->fields('c', array('ct_request_id', 'ct_result_comment'))
  ->condition('uid', $account->uid, '=')
  ->range(0, 1)
  ->execute();
  if ($result->rowCount() > 0) {
    $ct_result = $result->fetchObject();
    // If ct_result_comment is empty then user is approved by server.
    // But we delete it then user is not approved by admin.
    // We need to send negative feedback.
    _cleantalk_send_feedback($ct_result->ct_request_id, 0);
    db_delete('cleantalk_uids')
    ->condition('uid', $account->uid, '=')
    ->execute();
  }
}

/**
 * Implements hook_comment_view_alter().
 */
function cleantalk_comment_view_alter(&$build) {
  if (user_access('administer comments')) {
    $result = db_select('cleantalk_cids', 'c')
      ->fields('c', array('ct_request_id', 'ct_result_comment'))
      ->condition('cid', $build['#comment']->cid, '=')
      ->range(0, 1)
      ->execute();
    if ($result->rowCount() > 0) {
      $ct_result = $result->fetchObject();
      if (!empty($ct_result->ct_result_comment)) {
        $build['comment_body'][0]['#markup'] .= '<hr>' . $ct_result->ct_result_comment;
      }
    }
  }
}

/**
 * Implements hook_registry_files_alter().
 */
function cleantalk_registry_files_alter(&$files, $modules) {
  $library_path = libraries_get_path('cleantalk');
  if (!$library_path) {
    return;
  }
  foreach (array('cleantalk.class.php', 'JSON.php') as $filename) {
    $files[$library_path . '/' . $filename] = array(
      'module' => 'cleantalk',
      'weight' => 0,
    );
  }
}

/**
 * Implements hook_menu().
 */
function cleantalk_menu() {
  $items['admin/config/cleantalk'] = array(
    'title' => 'Antispam by CleanTalk',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cleantalk_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'cleantalk.admin.inc',
  );
  return $items;
}

/**
 * Cleantalk inner function - gets working server.
 */
function _cleantalk_get_ws() {
  $result = db_select('cleantalk_server', 'c')
  ->fields('c', array('work_url', 'server_url', 'server_ttl', 'server_changed'))
  ->range(0, 1)
  ->execute();
  if ($result->rowCount() > 0) {
    $current_ws = $result->fetchObject();
    return array(
      'work_url' => $current_ws->work_url,
      'server_url' => $current_ws->server_url,
      'server_ttl' => $current_ws->server_ttl,
      'server_changed' => $current_ws->server_changed,
    );
  }
  else {
    return array(
      'work_url' => 'http://moderate.cleantalk.ru',
      'server_url' => 'http://moderate.cleantalk.ru',
      'server_ttl' => 0,
      'server_changed' => 0,
    );
  }
}

/**
 * Cleantalk inner function - sets working server.
 */
function _cleantalk_set_ws($work_url = 'http://moderate.cleantalk.ru', $server_url = 'http://moderate.cleantalk.ru', $server_ttl = 0, $server_changed = 0) {
  $result = db_select('cleantalk_server', 'c')
  ->countQuery()
  ->execute()
  ->fetchObject();
  if (property_exists($result, 'expression') && intval($result->expression) > 0) {
    db_update('cleantalk_server')
    ->fields(array(
      'work_url' => $work_url,
      'server_url' => $server_url,
      'server_ttl' => $server_ttl,
      'server_changed' => $server_changed,
    ))
    ->execute();
  }
  else {
    db_insert('cleantalk_server')
    ->fields(array(
      'work_url' => $work_url,
      'server_url' => $server_url,
      'server_ttl' => $server_ttl,
      'server_changed' => $server_changed,
    ))
    ->execute();
  }
}

/**
 * Cleantalk inner function - sends feedback to server.
 */
function _cleantalk_send_feedback($request_id, $feedback) {
  $path = _cleantalk_library_path_ok();
  if (!$path) {
    watchdog(
      'cleantalk',
      _cleantalk_library_missing_message_4runtime('CleanTalk PHP-antispam classes', 'sites/all/libraries/cleantalk'),
      array(),
      WATCHDOG_ERROR
    );
    return;
  }
  else {
    require_once DRUPAL_ROOT . '/' . $path . '/cleantalk.class.php';
  }

  $ct_authkey = variable_get('cleantalk_authkey', '');
  $ct_ws = _cleantalk_get_ws();

  $ct = new Cleantalk();
  $ct->work_url = $ct_ws['work_url'];
  $ct->server_url = $ct_ws['server_url'];
  $ct->server_ttl = $ct_ws['server_ttl'];
  $ct->server_changed = $ct_ws['server_changed'];

  $ct_request = new CleantalkRequest();
  $ct_request->auth_key = $ct_authkey;
  $ct_request->agent = 'drupal-101';
  $ct_request->sender_ip = ip_address();
  $ct_request->feedback = $request_id . ':' . $feedback;

  $ct->sendFeedback($ct_request);
}

/**
 * Cleantalk inner function - verify CleanTalk library.
 * 
 * @return string
 *   CleanTalk library path when success or FALSE when error.
 */
function _cleantalk_library_path_ok() {
  $library_path = libraries_get_path('cleantalk');
  if (!$library_path) {
    return FALSE;
  }
  foreach (array('cleantalk.class.php', 'JSON.php') as $filename) {
    if (!file_exists(DRUPAL_ROOT . '/' . $library_path . '/' . $filename)) {
      return FALSE;
    }
  }
  return $library_path;
}

/**
 * Cleantalk inner function - missing CleanTalk library message for runtime.
 */
function _cleantalk_library_missing_message_4runtime($title, $path) {
  $t = get_t();
  return $t('"Antispam by CleanTalk" module is NOT WORKING due to missing or broken CleanTalk library.') .
    ' <br />' .
    $t(
      'Please download <a target="_blank" href="@url">@title</a>, extract the archive and copy the contents to the following location:<br /><code>@path</code>.',
      array(
        '@url' => 'https://github.com/CleanTalk/php-antispam',
        '@path' => $path,
        '@title' => $title,
      )
    ) .
    ' <br />' .
    $t('Make sure 2 files <strong>cleantalk.class.php</strong> and <strong>JSON.php</strong> are located there.') .
    '<br />';
}

/**
 * Cleantalk inner function - alters needed form.
 */
function _cleantalk_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $session_time_key = 'ct_submit_register_time';
  }
  else {
    $session_time_key = 'ct_submit_comment_time';
  }
  // To define form state exactly is not a trivial task in this CMS.
  $key2check = 'input';
  $flag_submitted = $form_state['submitted'];
  $flag_executed = $form_state['executed'];
  if (
    array_key_exists($key2check, $form_state)
    && is_array($form_state[$key2check])
    && count($form_state[$key2check]) == 0
    ||
    array_key_exists($key2check, $form_state)
    && !is_array($form_state[$key2check])
    ||
    !array_key_exists($key2check, $form_state)
  ) {
    $flag_input = FALSE;
  }
  else {
    $flag_input = TRUE;
  }

  if (
    !$flag_input && !$flag_submitted && !$flag_executed
    ||
    $flag_input && $flag_submitted && $flag_executed
  ) {
    // All FALSE means new rendered comment form.
    // All TRUE means comment form after Preview pressed!
    $_SESSION[$session_time_key] = time();

    $ct_check_def = '0';
    $ct_check_value = _cleantalk_get_checkjs_value();
    $field_name = 'ct_checkjs';
    $field_id = $field_name . '_' . md5(rand(0, 1000));
    $html_template = "\n" .
      '<input type="hidden" id="%s" name="%s" value="%s" />' . "\n" .
      '<script type="text/javascript">' . "\n" .
      '// <![CDATA[' . "\n" .
      'setTimeout("document.getElementById(\"%s\").value = document.getElementById(\"%s\").value.replace(/^%s$/, \"%s\");",1000);' . "\n" .
      '// ]]>' . "\n" .
      '</script>' . "\n\n";
    $ct_addon_body = sprintf($html_template, $field_id, $field_name, $ct_check_def, $field_id, $field_id, $ct_check_def, $ct_check_value);

    $form['ct_addon'] = array(
      '#type' => 'hidden',
      '#value' => 0,
      '#suffix' => $ct_addon_body,
    );
  }
}

/**
 * Cleantalk inner function - gets JavaScript checking value.
 */
function _cleantalk_get_checkjs_value() {
  return md5(variable_get('cleantalk_authkey', '') . '+' . variable_get('site_mail', ini_get('sendmail_from')));
}
