<?php

/**
 * @file
 * Main CleanTalk integration module functions.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cleantalk_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  _cleantalk_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function cleantalk_form_comment_form_alter(&$form, &$form_state, $form_id) {
  _cleantalk_form_alter($form, $form_state, $form_id);
}

/**
 * Cleantalk registration validation function.
 */
function cleantalk_validate_register(&$form, &$form_state) {
  $spam_check = array();
  $spam_check['type'] = 'register';
  $spam_check['sender_email'] = !empty($form_state['values']['mail']) ? $form_state['values']['mail'] : '';
  $spam_check['sender_nickname'] = !empty($form_state['values']['name']) ? $form_state['values']['name'] : '';
  $spam_check['timezone'] = !empty($form_state['values']['timezone']) ? $form_state['values']['timezone'] : '';

  $spam_result = _cleantalk_check_spam($spam_check);
  if (isset($spam_result)
    && is_array($spam_result)
    && $spam_result['errno'] == 0
    && $spam_result['allow'] != 1
  ) {
    // Value of ct_result_comment is sanitized already (before storing).
    form_set_error('mail', $spam_result['ct_result_comment']);
  }
}

/**
 * Cleantalk comment validation function.
 */
function cleantalk_validate_comment(&$form, &$form_state) {
  global $user;
  // Don't check reged user with >= 'cleantalk_comments' approved msgs.
  if ($user->uid > 0) {

    $result = db_query(
      'SELECT count(*) AS count FROM {comment} WHERE uid=:uid AND status=1',
      array(':uid' => $user->uid)
    );
    $count = intval($result->fetchObject()->count);

    $ct_comments = variable_get('cleantalk_comments', 3);
    if ($count >= $ct_comments) {
      return;
    }
  }

  $comment_lang = array_key_exists('language', $form_state['values']) ? $form_state['values']['language'] : LANGUAGE_NONE;
  $comment_body = $form_state['values']['comment_body'][$comment_lang][0];

  $spam_check = array();
  $spam_check['type'] = 'comment';
  $spam_check['sender_email'] = !empty($form_state['values']['mail']) ? $form_state['values']['mail'] : '';
  $spam_check['sender_nickname'] = !empty($form_state['values']['name']) ? $form_state['values']['name'] : '';
  $spam_check['message_title'] = !empty($form_state['values']['subject']) ? $form_state['values']['subject'] : '';
  $spam_check['message_body'] = isset($comment_body['value']) ? $comment_body['value'] : '';
  $spam_check['example_title'] = '';
  $spam_check['example_body'] = '';
  $spam_check['example_comments'] = '';

  // Node id of commented entity - page or article.
  $nid = array_key_exists('nid', $form_state['values']) ? $form_state['values']['nid'] : NULL;
  if ($nid != NULL) {
    // Find node.
    $result_node = node_load($nid);
    if ($result_node) {
      $spam_check['example_title'] = property_exists($result_node, 'title') ? strip_tags($result_node->title) : '';
      $node_field = field_get_items('node', $result_node, 'body');
      foreach ($node_field as $nf) {
        $field_value = field_view_value('node', $result_node, 'body', $nf);
        $spam_check['example_body'] .= strip_tags(render($field_value));
      }
    }
    // Find last 10 comments.
    $result_10 = db_query(
      'SELECT c.subject AS subject,f.comment_body_value AS value FROM {comment} AS c LEFT JOIN {field_data_comment_body} AS f ON c.cid=f.entity_id WHERE c.nid=:nid AND c.status=1 ORDER BY changed DESC LIMIT 10',
      array(':nid' => $nid)
    );
    foreach ($result_10 as $record) {
      $spam_check['example_comments'] .= strip_tags($record->subject) . " \n\n" .
        strip_tags($record->value) . " \n\n";
    }
  }

  $spam_result = _cleantalk_check_spam($spam_check);
  if (isset($spam_result)
    && is_array($spam_result)
    && $spam_result['errno'] == 0
    && $spam_result['allow'] != 1
    && $spam_result['stop_queue'] == 1
  ) {
    // Value of ct_result_comment is sanitized already (before storing).
    form_set_error('comment_body', $spam_result['ct_result_comment']);
  }
}

/**
 * Implements hook_comment_presave().
 */
function cleantalk_comment_presave($comment) {
  $ct_result = _cleantalk_ct_result();
  if (!empty($ct_result['ct_request_id'])) {
    $ct_automod = variable_get('cleantalk_automod', 1);
    if ($ct_automod == 1) {
      // Automoderation enabled - change comment status.
      // Not empty 'ct_result_comment' means bad comment, set status = 0.
      // Empty 'ct_result_comment' means good comment, set status = 1.
      $comment->status = empty($ct_result['ct_result_comment']) ? COMMENT_PUBLISHED : COMMENT_NOT_PUBLISHED;
    }
    // Don't clear 'ct_request_id', use it in cleantalk_comment_insert().
  }
}

/**
 * Implements hook_comment_insert().
 */
function cleantalk_comment_insert($comment) {
  $ct_result = _cleantalk_ct_result();
  if (!empty($ct_result['ct_request_id'])) {
    // Values of request_id and comment are stored in globals.
    // Store them in DB now.
    db_insert('cleantalk_cids')
    ->fields(array(
    'cid' => $comment->cid,
    'ct_request_id' => $ct_result['ct_request_id'],
    'ct_result_comment' => empty($ct_result['ct_result_comment']) ? '' : $ct_result['ct_result_comment'],
    ))
    ->execute();
    _cleantalk_ct_result('set');
  }
}

/**
 * Implements hook_user_insert().
 */
function cleantalk_user_insert(&$edit, $account, $category) {
  if ($category != 'account') {
    return;
  }
  $ct_result = _cleantalk_ct_result();
  if (!empty($ct_result['ct_request_id'])) {
    db_insert('cleantalk_uids')
    ->fields(array(
    'uid' => $account->uid,
    'ct_request_id' => $ct_result['ct_request_id'],
    'ct_result_comment' => empty($ct_result['ct_result_comment']) ? '' : $GLOBALS['ct_result_comment'],
    ))
    ->execute();
    _cleantalk_ct_result('set');
  }
}

/**
 * Implements hook_comment_publish().
 */
function cleantalk_comment_publish($comment) {
  $result = db_select('cleantalk_cids', 'c')
  ->fields('c', array('ct_request_id', 'ct_result_comment'))
  ->condition('cid', $comment->cid, '=')
  ->range(0, 1)
  ->execute();
  if ($result->rowCount() > 0) {
    $ct_result = $result->fetchObject();
    // If ct_result_comment is not empty then comment is not approved by server.
    // But we publish it then comment is approved by admin.
    // We need to send positive feedback.
    _cleantalk_send_feedback($ct_result->ct_request_id, 1);
    db_delete('cleantalk_cids')
    ->condition('cid', $comment->cid, '=')
    ->execute();
  }
}

/**
 * Implements hook_comment_delete().
 */
function cleantalk_comment_delete($comment) {
  $result = db_select('cleantalk_cids', 'c')
  ->fields('c', array('ct_request_id', 'ct_result_comment'))
  ->condition('cid', $comment->cid, '=')
  ->range(0, 1)
  ->execute();
  if ($result->rowCount() > 0) {
    $ct_result = $result->fetchObject();
    // If ct_result_comment is empty then comment is approved by server.
    // But we delete it then comment is not approved by admin.
    // We need to send negative feedback.
    _cleantalk_send_feedback($ct_result->ct_request_id, 0);
    db_delete('cleantalk_cids')
    ->condition('cid', $comment->cid, '=')
    ->execute();
  }
}

/**
 * Implements hook_user_delete().
 */
function cleantalk_user_delete($account) {
  $result = db_select('cleantalk_uids', 'c')
  ->fields('c', array('ct_request_id', 'ct_result_comment'))
  ->condition('uid', $account->uid, '=')
  ->range(0, 1)
  ->execute();
  if ($result->rowCount() > 0) {
    $ct_result = $result->fetchObject();
    // If ct_result_comment is empty then user is approved by server.
    // But we delete it then user is not approved by admin.
    // We need to send negative feedback.
    _cleantalk_send_feedback($ct_result->ct_request_id, 0);
    db_delete('cleantalk_uids')
    ->condition('uid', $account->uid, '=')
    ->execute();
  }
}

/**
 * Implements hook_comment_view_alter().
 */
function cleantalk_comment_view_alter(&$build) {
  if (user_access('administer comments')) {
    $result = db_select('cleantalk_cids', 'c')
      ->fields('c', array('ct_request_id', 'ct_result_comment'))
      ->condition('cid', $build['#comment']->cid, '=')
      ->range(0, 1)
      ->execute();
    if ($result->rowCount() > 0) {
      $ct_result = $result->fetchObject();
      if (!empty($ct_result->ct_result_comment)) {
        // Value of ct_result_comment is sanitized already (before storing).
        $build['comment_body'][0]['#markup'] .= '<hr>' .
          $ct_result->ct_result_comment;
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function cleantalk_menu() {
  $items['admin/config/cleantalk'] = array(
    'title' => 'Antispam by CleanTalk',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cleantalk_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'cleantalk.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_mail().
 */
function cleantalk_mail($key, &$message, $params) {
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'][] = $params['body'];
  }
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external CleanTalk librariy.
 */
function cleantalk_libraries_info() {
  // Expected to be extracted into 'sites/all/libraries/cleantalk'.
  $libraries['cleantalk'] = array(
    'name' => 'CleanTalk PHP-antispam classes',
    'vendor url' => 'http://cleantalk.org',
    'download url' => 'https://github.com/CleanTalk/php-antispam',
    'version arguments' => array(
      'file' => 'cleantalk.class.php',
      'pattern' => '/@version\s+([0-9a-zA-Z\.-]+)/',
      'lines' => 10,
    ),
    'files' => array(
      'php' => array('cleantalk.class.php'),
    ),
  );
  return $libraries;
}

/**
 * Cleantalk inner function - gets working server.
 */
function _cleantalk_get_ws() {
  return array(
    'work_url' => variable_get('cleantalk_work_url', 'http://moderate.cleantalk.ru'),
    'server_url' => variable_get('cleantalk_server_url', 'http://moderate.cleantalk.ru'),
    'server_ttl' => variable_get('cleantalk_server_ttl', 0),
    'server_changed' => variable_get('cleantalk_server_changed', 0),
  );
}

/**
 * Cleantalk inner function - sets working server.
 */
function _cleantalk_set_ws($work_url = 'http://moderate.cleantalk.ru',
  $server_url = 'http://moderate.cleantalk.ru',
  $server_ttl = 0, $server_changed = 0) {
  variable_set('cleantalk_work_url', $work_url);
  variable_set('cleantalk_server_url', $server_url);
  variable_set('cleantalk_server_ttl', $server_ttl);
  variable_set('cleantalk_server_changed', $server_changed);
}

/**
 * Cleantalk inner function - sends feedback to server.
 */
function _cleantalk_send_feedback($request_id, $feedback) {
  if (!($library = libraries_load('cleantalk')) || empty($library['loaded'])) {
    watchdog(
      'cleantalk',
      _cleantalk_library_missing_message_4runtime(
        'CleanTalk PHP-antispam classes',
        'sites/all/libraries/cleantalk'
      ),
      array(),
      WATCHDOG_ERROR
    );
    return;
  }

  $ct_authkey = variable_get('cleantalk_authkey', '');
  $ct_ws = _cleantalk_get_ws();

  $ct = new Cleantalk();
  $ct->work_url = $ct_ws['work_url'];
  $ct->server_url = $ct_ws['server_url'];
  $ct->server_ttl = $ct_ws['server_ttl'];
  $ct->server_changed = $ct_ws['server_changed'];

  $ct_request = new CleantalkRequest();
  $ct_request->auth_key = $ct_authkey;
  $ct_request->agent = 'drupal-101';
  $ct_request->sender_ip = ip_address();
  $ct_request->feedback = $request_id . ':' . $feedback;

  $ct->sendFeedback($ct_request);
}

/**
 * Cleantalk inner function - missing CleanTalk library message for runtime.
 */
function _cleantalk_library_missing_message_4runtime($title, $path) {
  $t = get_t();
  return
    $t(
      '"Antispam by CleanTalk" module is NOT WORKING' .
      ' due to missing or broken CleanTalk library.'
    ) .
    ' <br />' .
    $t(
      'Please download <a target="_blank" href="@url">@title</a>, extract ' .
      'the archive and copy the contents to the following location:' .
      '<br /><code>@path</code>.',
      array(
        '@url' => 'https://github.com/CleanTalk/php-antispam',
        '@path' => $path,
        '@title' => $title,
      )
    ) .
    ' <br />' .
    $t(
      'Make sure 2 files <strong>cleantalk.class.php</strong> and ' .
      '<strong>JSON.php</strong> are located there.'
    ) .
    '<br />';
}

/**
 * Cleantalk inner function - alters needed form.
 */
function _cleantalk_form_alter(&$form, &$form_state, $form_id) {
  static $js_cookie_added = FALSE;

  if ($js_cookie_added) {
    return;
  }

  $js_cookie_added = TRUE;

  if ($form_id == 'user_register_form') {
    $session_time_key = 'ct_submit_register_time';
    $form['#validate'][] = 'cleantalk_validate_register';
  }
  else {
    $session_time_key = 'ct_submit_comment_time';
    $form['#validate'][] = 'cleantalk_validate_comment';
  }

  drupal_session_start();
  $_SESSION[$session_time_key] = REQUEST_TIME;

  $field_name = 'ct_checkjs';
  $ct_check_def = '0';
  if (!isset($_COOKIE[$field_name])) {
    setcookie($field_name, $ct_check_def, 0, '/');
  }

  // We cannot place JS in separate file.
  // Because it is not static - we have to use generated values.
  $ct_check_value = _cleantalk_get_checkjs_value();
  $js_template = 'function ctSetCookie(c_name, value) {
  document.cookie = c_name + "=" + escape(value) + "; path=/";
}
ctSetCookie("%s", "%s");';
  $js_addon_body = sprintf($js_template, $field_name, $ct_check_value);

  drupal_add_js($js_addon_body,
    array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5,
      'cache' => FALSE,
      'every_page' => FALSE,
    )
  );
}

/**
 * Cleantalk inner function - gets JavaScript checking value.
 */
function _cleantalk_get_checkjs_value() {
  return md5(variable_get('cleantalk_authkey', '') . '+' .
    variable_get('site_mail', ini_get('sendmail_from')));
}

/**
 * Cleantalk inner function - performs antispam checking.
 */
function _cleantalk_check_spam($spam_check) {
  $my_module = 'cleantalk';
  if (!($library = libraries_load($my_module)) || empty($library['loaded'])) {
    watchdog(
      'cleantalk',
      _cleantalk_library_missing_message_4runtime(
        'CleanTalk PHP-antispam classes',
        'sites/all/libraries/cleantalk'
      ),
      array(),
      WATCHDOG_ERROR
    );
    return;
  }

  $ct_authkey = variable_get('cleantalk_authkey', '');
  $ct_ws = _cleantalk_get_ws();

  if (!isset($_COOKIE['ct_checkjs'])) {
    $checkjs = NULL;
  }
  elseif ($_COOKIE['ct_checkjs'] == _cleantalk_get_checkjs_value()) {
    $checkjs = 1;
  }
  else {
    $checkjs = 0;
  }

  $user_agent = $_SERVER['HTTP_USER_AGENT'];
  $refferrer = $_SERVER['HTTP_REFERER'];

  $ct = new Cleantalk();
  $ct->work_url = $ct_ws['work_url'];
  $ct->server_url = $ct_ws['server_url'];
  $ct->server_ttl = $ct_ws['server_ttl'];
  $ct->server_changed = $ct_ws['server_changed'];

  $sender_info = drupal_json_encode(
    array(
      'cms_lang' => 'en',
      'REFFERRER' => $refferrer,
      'post_url' => $refferrer,
      'USER_AGENT' => $user_agent,
    )
  );

  $ct_request = new CleantalkRequest();
  $ct_request->auth_key = $ct_authkey;
  $ct_request->agent = 'drupal-101';
  $ct_request->response_lang = 'en';
  $ct_request->js_on = $checkjs;
  $ct_request->sender_info = $sender_info;
  $ct_request->sender_email = $spam_check['sender_email'];
  $ct_request->sender_nickname = $spam_check['sender_nickname'];
  $ct_request->sender_ip = ip_address();

  $ct_submit_time = NULL;
  drupal_session_start();
  switch ($spam_check['type']) {
    case 'comment':
      if (isset($_SESSION['ct_submit_comment_time'])) {
        $ct_submit_time = REQUEST_TIME - $_SESSION['ct_submit_comment_time'];
      }
      $timelabels_key = 'mail_error_comment';

      $ct_request->submit_time = $ct_submit_time;
      $ct_request->message = $spam_check['message_title'] . " \n\n" .
        $spam_check['message_body'];

      $example = '';
      $a_example = array();
      $a_example['title'] = $spam_check['example_title'];
      $a_example['body'] = $spam_check['example_body'];
      $a_example['comments'] = $spam_check['example_comments'];

      // Additional info.
      $post_info = '';
      $a_post_info['comment_type'] = 'comment';

      // JSON format.
      $example = drupal_json_encode($a_example);
      $post_info = drupal_json_encode($a_post_info);

      // Plain text format.
      if ($example === FALSE) {
        $example = '';
        $example .= $a_example['title'] . " \n\n";
        $example .= $a_example['body'] . " \n\n";
        $example .= $a_example['comments'];
      }
      if ($post_info === FALSE) {
        $post_info = '';
      }

      // Example text + last N comments in json or plain text format.
      $ct_request->example = $example;
      $ct_request->post_info = $post_info;

      $ct_result = $ct->isAllowMessage($ct_request);
      break;

    case 'register':
      if (isset($_SESSION['ct_submit_register_time'])) {
        $ct_submit_time = REQUEST_TIME - $_SESSION['ct_submit_register_time'];
      }
      $timelabels_key = 'mail_error_reg';
      $ct_request->submit_time = $ct_submit_time;
      $ct_request->tz = $spam_check['timezone'];

      $ct_result = $ct->isAllowUser($ct_request);
      break;

  }
  $ret_val = array();
  $ret_val['ct_request_id'] = $ct_result->id;

  if ($ct->server_change) {
    _cleantalk_set_ws(
            $ct->work_url, $ct->server_url, $ct->server_ttl, REQUEST_TIME
    );
  }

  // First check errstr flag.
  if (!empty($ct_result->errstr)
      || (!empty($ct_result->inactive) && $ct_result->inactive == 1)
  ) {
    // Cleantalk error so we go default way (no action at all).
    $ret_val['errno'] = 1;
    // Just inform admin.
    $err_title = $_SERVER['SERVER_NAME'] . ' - CleanTalk hook error';
    if (!empty($ct_result->errstr)) {
      $ret_val['errstr'] = _cleantalk_filter_response($ct_result->errstr);
    }
    else {
      $ret_val['errstr'] = _cleantalk_filter_response($ct_result->comment);
    }

    $send_flag = FALSE;

    $result = db_select('cleantalk_timelabels', 'c')
    ->fields('c', array('ct_value'))
    ->condition('ct_key', $timelabels_key, '=')
    ->execute();
    if ($result->rowCount() == 0) {
      $send_flag = TRUE;
    }
    elseif (REQUEST_TIME - 900 > $result->fetchObject()->ct_value) {
      // 15 minutes.
      $send_flag = TRUE;
    }

    if ($send_flag) {
      db_merge('cleantalk_timelabels')
      ->key(array(
        'ct_key' => $timelabels_key,
      ))
      ->fields(array(
        'ct_value' => REQUEST_TIME,
      ))
      ->execute();

      $to = variable_get('site_mail', ini_get('sendmail_from'));
      if (!empty($to)) {
        drupal_mail($my_module,
          $timelabels_key,
          $to,
          language_default(),
          array(
            'subject' => $err_title,
            'body' => $ret_val['errstr'],
            'headers' => array(),
          ),
          $to,
          TRUE
        );
      }
    }
    return $ret_val;
  }

  $ret_val['errno'] = 0;
  if ($ct_result->allow == 1) {
    // Not spammer.
    $ret_val['allow'] = 1;
    // Store request_id in globals to store it in DB later.
    _cleantalk_ct_result('set', $ct_result->id);
    // Don't store 'ct_result_comment', means good comment.
  }
  else {
    // Spammer.
    $ret_val['allow'] = 0;
    $ret_val['ct_result_comment'] = _cleantalk_filter_response($ct_result->comment);

    // Check stop_queue flag.
    if ($spam_check['type'] == 'comment' && $ct_result->stop_queue == 0) {
      // Spammer and stop_queue == 0 - to manual approvement.
      $ret_val['stop_queue'] = 0;
      // Store request_id and comment in static to store them in DB later.
      // Store 'ct_result_comment' - means bad comment.
      _cleantalk_ct_result('set', $ct_result->id, $ret_val['ct_result_comment']);
    }
    else {
      // New user or Spammer and stop_queue == 1 - display form error message.
      $ret_val['stop_queue'] = 1;
    }
  }
  return $ret_val;
}

/**
 * Cleantalk inner function - performs CleanTalk comment|errstr filtering.
 */
function _cleantalk_filter_response($ct_response) {
  if (preg_match('//u', $ct_response)) {
    $err_str = preg_replace('/\*\*\*/iu', '', $ct_response);
  }
  else {
    $err_str = preg_replace('/\*\*\*/i', '', $ct_response);
  }
  return filter_xss($err_str, array('a'));
}

/**
 * Cleantalk inner function - stores spam checking result.
 */
function _cleantalk_ct_result($cmd = 'get', $id = '', $comment = '') {
  static $request_id = '';
  static $result_comment = '';

  if ($cmd == 'set') {
    $request_id = $id;
    $result_comment = $comment;
  }
  else {
    return array(
      'ct_request_id' => $request_id,
      'ct_result_comment' => $result_comment,
    );
  }
}
